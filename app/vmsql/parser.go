// Code generated by goyacc -l -o parser.go sql.y. DO NOT EDIT.
package vmsql

import (
	__yyfmt__ "fmt"
	"reflect"
	"strings"
)

func setParseTree(yylex yyLexer, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setDDL(yylex yyLexer, node Statement) {
	yylex.(*Tokenizer).partialDDL = node
}

func incNesting(yylex yyLexer) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex yyLexer) {
	yylex.(*Tokenizer).nesting--
}

// skipToEnd forces the lexer to end prematurely. Not all SQL statements
// are supported by the Parser, thus calling skipToEnd will make the lexer
// return EOF early.
func skipToEnd(yylex yyLexer) {
	yylex.(*Tokenizer).SkipToEnd = true
}

func bindVariable(yylex yyLexer, bvar string) {
	yylex.(*Tokenizer).BindVars[bvar] = struct{}{}
}

type yySymType struct {
	yys           int
	columns       []*Column
	str           string
	statement     Statement
	column        *Column
	columnType    reflect.Kind
	tuples        [][]string
	tuple         []string
	tagFilter     *TagFilter
	deleteFilters *DeleteFilter
	functions     [][]*Function
	function      []*Function
	orderBy       *OrderBy
	whereFilters  *MultiFilters
	timeFilter    *TimeFilter
	otherFilter   *OtherFilter
}

const LEX_ERROR = 57346
const UNUSED = 57347
const OR = 57348
const XOR = 57349
const AND = 57350
const NOT = 57351
const BETWEEN = 57352
const CASE = 57353
const WHEN = 57354
const THEN = 57355
const ELSE = 57356
const END = 57357
const LE = 57358
const GE = 57359
const NE = 57360
const NULL_SAFE_EQUAL = 57361
const IS = 57362
const LIKE = 57363
const REGEXP = 57364
const IN = 57365
const SHIFT_LEFT = 57366
const SHIFT_RIGHT = 57367
const DIV = 57368
const MOD = 57369
const UNARY = 57370
const CREATE = 57371
const INSERT = 57372
const INTO = 57373
const VALUES = 57374
const DELETE = 57375
const DROP = 57376
const FROM = 57377
const WHERE = 57378
const SELECT = 57379
const LIMIT = 57380
const ORDER = 57381
const BY = 57382
const GROUP = 57383
const DESC = 57384
const ASC = 57385
const DESCRIBE = 57386
const BOOL = 57387
const STRING = 57388
const INT32 = 57389
const UINT32 = 57390
const INT64 = 57391
const UINT64 = 57392
const FLOAT = 57393
const DOUBLE = 57394
const BOOLEAN = 57395
const BIT = 57396
const TINYINT = 57397
const SMALLINT = 57398
const INT = 57399
const INTEGER = 57400
const BIGINT = 57401
const STRING_NUM = 57402
const INTEGER_NUM = 57403
const FLOAT_NUM = 57404
const DECIMAL_NUM = 57405
const TRUE_NUM = 57406
const FALSE_NUM = 57407
const ID = 57408
const AT_ID = 57409
const AT_AT_ID = 57410
const HEX = 57411
const INTEGRAL = 57412
const DECIMAL = 57413
const HEXNUM = 57414
const BIT_LITERAL = 57415
const UTINYINT = 57416
const USMALLINT = 57417
const UINT = 57418
const UBIGINT = 57419
const REAL = 57420
const IF = 57421
const EXISTS = 57422
const NULL = 57423
const DEFAULT = 57424
const TAG = 57425
const VALUE = 57426
const DATABASE = 57427
const TABLE = 57428

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNUSED",
	"'('",
	"','",
	"')'",
	"OR",
	"'|'",
	"XOR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"CREATE",
	"INSERT",
	"INTO",
	"VALUES",
	"DELETE",
	"DROP",
	"FROM",
	"WHERE",
	"SELECT",
	"LIMIT",
	"ORDER",
	"BY",
	"GROUP",
	"DESC",
	"ASC",
	"':'",
	"'['",
	"']'",
	"DESCRIBE",
	"BOOL",
	"STRING",
	"INT32",
	"UINT32",
	"INT64",
	"UINT64",
	"FLOAT",
	"DOUBLE",
	"BOOLEAN",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"STRING_NUM",
	"INTEGER_NUM",
	"FLOAT_NUM",
	"DECIMAL_NUM",
	"TRUE_NUM",
	"FALSE_NUM",
	"ID",
	"AT_ID",
	"AT_AT_ID",
	"HEX",
	"INTEGRAL",
	"DECIMAL",
	"HEXNUM",
	"BIT_LITERAL",
	"UTINYINT",
	"USMALLINT",
	"UINT",
	"UBIGINT",
	"REAL",
	"IF",
	"EXISTS",
	"NULL",
	"DEFAULT",
	"TAG",
	"VALUE",
	"DATABASE",
	"TABLE",
	"';'",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

var yyExca = [...]int8{
	-1, 1,
	1, -1,
	-2, 0,
}

const yyPrivate = 57344

const yyLast = 284

var yyAct = [...]uint8{
	102, 101, 68, 65, 69, 99, 122, 143, 170, 100,
	61, 71, 29, 16, 38, 19, 17, 161, 25, 31,
	30, 192, 39, 41, 42, 43, 159, 32, 33, 34,
	35, 36, 37, 28, 127, 128, 190, 64, 198, 103,
	103, 104, 105, 49, 106, 107, 40, 62, 212, 56,
	57, 58, 25, 25, 118, 63, 220, 213, 104, 105,
	72, 106, 107, 178, 218, 219, 119, 172, 145, 97,
	73, 108, 144, 171, 74, 55, 45, 47, 125, 123,
	82, 96, 21, 44, 63, 133, 95, 94, 83, 81,
	84, 85, 86, 87, 88, 67, 20, 54, 24, 18,
	181, 139, 180, 138, 147, 162, 51, 146, 158, 89,
	90, 91, 92, 93, 160, 134, 72, 72, 179, 142,
	174, 46, 110, 135, 136, 140, 141, 126, 53, 75,
	124, 98, 157, 178, 63, 112, 164, 166, 111, 52,
	163, 169, 165, 167, 132, 217, 59, 60, 173, 110,
	215, 176, 176, 175, 177, 132, 211, 206, 188, 199,
	182, 183, 184, 185, 186, 187, 189, 110, 210, 168,
	191, 66, 193, 15, 197, 132, 208, 200, 29, 137,
	204, 205, 22, 207, 202, 31, 30, 132, 196, 132,
	195, 79, 194, 32, 33, 34, 35, 36, 37, 28,
	9, 10, 209, 130, 12, 11, 132, 131, 13, 29,
	110, 109, 214, 79, 78, 216, 31, 30, 14, 77,
	76, 221, 129, 50, 32, 33, 34, 35, 36, 37,
	28, 29, 48, 1, 121, 203, 120, 23, 31, 30,
	26, 27, 80, 70, 8, 149, 32, 33, 34, 35,
	36, 37, 28, 150, 151, 152, 153, 154, 155, 149,
	7, 156, 6, 201, 5, 114, 4, 150, 151, 152,
	153, 154, 155, 115, 3, 156, 2, 148, 116, 0,
	0, 117, 0, 113,
}

var yyPact = [...]int16{
	155, -1000, -93, -1000, -1000, -1000, -1000, -1000, -1000, -89,
	52, -90, 45, 145, -91, -1000, -1000, -52, 167, 167,
	167, 32, 25, 70, -1000, 226, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 167, 217,
	93, 91, -1000, 23, 167, 167, 167, 167, 167, -1000,
	167, -62, 165, 47, 167, 167, -1000, 22, 22, -1000,
	212, 206, -1000, 16, 167, 124, -39, 165, 203, -1000,
	126, -1000, 252, 9, 167, 9, -1000, -22, -1000, 167,
	-68, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 216, 197, 199,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 124, 37,
	167, 167, 167, 173, 72, -39, -39, -40, 17, 12,
	95, -1000, -1000, 246, 17, 100, -1000, 13, 4, 167,
	-39, -1000, -39, 165, -1000, -1000, -1000, -39, 163, -40,
	-1000, -1000, -1000, 19, 11, 114, 167, 167, 57, 71,
	-39, -39, -39, -39, -39, -39, -40, 19, -1000, -64,
	-39, -79, -39, 184, 182, -1000, 124, 180, -39, -1000,
	-1000, -42, 153, 115, 167, -1000, 232, -1000, -39, -39,
	151, -40, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 168, -1000, 167,
	160, 127, 148, -14, -1000, -3, -39, -1000, -1000, 142,
	-1000, -1000, -1000, -40, 137, 6, -4, -1000, -1000, -1000,
	-22, -1000,
}

var yyPgo = [...]int16{
	0, 276, 274, 266, 264, 262, 260, 244, 243, 11,
	3, 2, 5, 54, 10, 47, 242, 4, 9, 0,
	1, 241, 8, 240, 237, 98, 7, 70, 236, 235,
	234, 6, 233, 173,
}

var yyR1 = [...]int8{
	0, 32, 33, 33, 1, 1, 1, 1, 1, 1,
	2, 2, 14, 14, 15, 15, 15, 15, 15, 15,
	16, 16, 16, 16, 16, 16, 16, 16, 16, 16,
	16, 16, 16, 16, 16, 16, 18, 18, 20, 19,
	19, 19, 19, 17, 17, 23, 21, 21, 21, 21,
	21, 21, 21, 21, 21, 3, 3, 3, 11, 11,
	10, 10, 12, 12, 4, 5, 5, 5, 8, 8,
	8, 9, 9, 9, 9, 9, 9, 6, 6, 24,
	24, 25, 25, 25, 22, 22, 26, 26, 26, 26,
	13, 13, 13, 27, 27, 28, 28, 28, 28, 31,
	31, 31, 31, 31, 31, 31, 31, 31, 31, 30,
	29, 29, 29, 7,
}

var yyR2 = [...]int8{
	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	6, 9, 1, 3, 3, 5, 5, 3, 5, 5,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 5, 6, 8, 1, 3,
	3, 5, 1, 3, 3, 3, 4, 5, 1, 3,
	3, 5, 6, 3, 3, 3, 4, 8, 8, 1,
	3, 4, 6, 1, 0, 2, 0, 5, 6, 6,
	0, 3, 5, 0, 2, 1, 1, 3, 3, 5,
	6, 3, 3, 3, 3, 3, 3, 3, 4, 5,
	1, 3, 5, 3,
}

var yyChk = [...]int16{
	-1000, -32, -1, -2, -3, -4, -5, -6, -7, 45,
	46, 50, 49, 53, 63, -33, 106, 105, 47, 105,
	51, 37, 37, -24, -25, -17, -23, -21, 85, 64,
	72, 71, 79, 80, 81, 82, 83, 84, 105, -17,
	98, -17, -17, -17, 51, 51, 51, 7, 6, -17,
	6, 13, 48, 37, 6, 52, -17, -17, -17, -25,
	-25, -14, -15, -17, 99, -10, 6, 48, -11, -17,
	-8, -9, -17, -27, 52, -27, 8, 7, 8, 7,
	-16, 73, 64, 72, 74, 75, 76, 77, 78, 93,
	94, 95, 96, 97, 71, 70, 65, -17, 7, -12,
	-18, -20, -19, 79, 80, 81, 83, 84, -10, 8,
	7, 12, 9, 31, 13, 21, 26, 29, -13, 57,
	-28, -30, -31, -17, -13, -19, -15, 102, 103, 6,
	6, 8, 7, 48, -17, -9, -9, 6, 31, 29,
	-18, -18, -20, -26, 55, 56, 12, 9, 31, 13,
	21, 22, 23, 24, 25, 26, 29, -26, 8, 13,
	101, 13, 101, -14, -12, -18, -10, -12, 6, -20,
	-22, 54, 56, -11, 6, -31, -17, -31, 6, 61,
	31, 29, -18, -18, -18, -18, -18, -18, -20, -22,
	100, -18, 100, -18, 8, 8, 8, -12, 80, 6,
	-11, 31, -12, -29, -19, -20, 6, -20, 8, -11,
	8, 8, 62, 60, -12, 8, -20, 8, 58, 59,
	60, -19,
}

var yyDef = [...]int8{
	0, -2, 2, 4, 5, 6, 7, 8, 9, 0,
	0, 0, 0, 0, 0, 1, 3, 0, 0, 0,
	0, 0, 0, 0, 79, 83, 43, 44, 45, 46,
	47, 48, 49, 50, 51, 52, 53, 54, 0, 0,
	0, 0, 64, 65, 0, 0, 0, 0, 0, 113,
	0, 0, 0, 0, 0, 0, 66, 93, 93, 80,
	0, 0, 12, 0, 0, 55, 0, 0, 0, 58,
	67, 68, 0, 90, 0, 90, 81, 0, 10, 0,
	0, 20, 21, 22, 23, 24, 25, 26, 27, 28,
	29, 30, 31, 32, 33, 34, 35, 0, 0, 0,
	62, 36, 37, 38, 39, 40, 41, 42, 56, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 86, 0,
	94, 95, 96, 0, 86, 0, 13, 14, 17, 0,
	0, 60, 0, 0, 59, 69, 70, 0, 0, 0,
	73, 74, 75, 84, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 84, 82, 0,
	0, 0, 0, 0, 0, 63, 57, 0, 0, 76,
	77, 0, 0, 91, 0, 97, 0, 98, 0, 0,
	0, 0, 101, 102, 103, 104, 105, 106, 107, 78,
	15, 16, 18, 19, 11, 61, 71, 0, 85, 0,
	0, 0, 0, 0, 110, 0, 0, 108, 72, 0,
	92, 99, 109, 0, 0, 87, 111, 100, 88, 89,
	0, 112,
}

var yyTok1 = [...]int8{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 14, 3, 3, 3, 40, 32, 3,
	6, 8, 37, 35, 7, 36, 3, 38, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 60, 106,
	22, 21, 23, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 61, 3, 62, 42, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 10, 3, 43,
}

var yyTok2 = [...]int8{
	2, 3, 4, 5, 9, 11, 12, 13, 15, 16,
	17, 18, 19, 20, 24, 25, 26, 27, 28, 29,
	30, 31, 33, 34, 39, 41, 44, 45, 46, 47,
	48, 49, 50, 51, 52, 53, 54, 55, 56, 57,
	58, 59, 63, 64, 65, 66, 67, 68, 69, 70,
	71, 72, 73, 74, 75, 76, 77, 78, 79, 80,
	81, 82, 83, 84, 85, 86, 87, 88, 89, 90,
	91, 92, 93, 94, 95, 96, 97, 98, 99, 100,
	101, 102, 103, 104, 105,
}

var yyTok3 = [...]int8{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := int(yyPact[state])
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && int(yyChk[int(yyAct[n])]) == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || int(yyExca[i+1]) != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := int(yyExca[i])
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = int(yyTok1[0])
		goto out
	}
	if char < len(yyTok1) {
		token = int(yyTok1[char])
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = int(yyTok2[char-yyPrivate])
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = int(yyTok3[i+0])
		if token == char {
			token = int(yyTok3[i+1])
			goto out
		}
	}

out:
	if token == 0 {
		token = int(yyTok2[1]) /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = int(yyPact[yystate])
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = int(yyAct[yyn])
	if int(yyChk[yyn]) == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = int(yyDef[yystate])
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && int(yyExca[xi+1]) == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = int(yyExca[xi+0])
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = int(yyExca[xi+1])
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = int(yyPact[yyS[yyp].yys]) + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = int(yyAct[yyn]) /* simulate a shift of "error" */
					if int(yyChk[yystate]) == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= int(yyR2[yyn])
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = int(yyR1[yyn])
	yyg := int(yyPgo[yyn])
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = int(yyAct[yyg])
	} else {
		yystate = int(yyAct[yyj])
		if int(yyChk[yystate]) != -yyn {
			yystate = int(yyAct[yyg])
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 5:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 6:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 7:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 8:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 9:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 10:
		yyDollar = yyS[yypt-6 : yypt+1]
		{
			yyVAL.statement = &CreateStatement{CreateTable: &Table{TableName: yyDollar[3].str, Columns: yyDollar[5].columns}, IfNotExists: false}
			setDDL(yylex, yyVAL.statement)
		}
	case 11:
		yyDollar = yyS[yypt-9 : yypt+1]
		{
			yyVAL.statement = &CreateStatement{CreateTable: &Table{TableName: yyDollar[6].str, Columns: yyDollar[8].columns}, IfNotExists: true}
			setDDL(yylex, yyVAL.statement)
		}
	case 12:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.columns = []*Column{yyDollar[1].column}
		}
	case 13:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.columns = append(yyDollar[1].columns, yyDollar[3].column)
		}
	case 14:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.column = &Column{ColumnName: yyDollar[1].str, Type: yyDollar[2].columnType, Tag: true, Nullable: true, Default: ""}
		}
	case 15:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			yyVAL.column = &Column{ColumnName: yyDollar[1].str, Type: yyDollar[2].columnType, Tag: true, Nullable: false, Default: ""}
		}
	case 16:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			yyVAL.column = &Column{ColumnName: yyDollar[1].str, Type: yyDollar[2].columnType, Tag: true, Nullable: true, Default: yyDollar[5].str}
		}
	case 17:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.column = &Column{ColumnName: yyDollar[1].str, Type: yyDollar[2].columnType, Tag: false, Nullable: true, Default: ""}
		}
	case 18:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			yyVAL.column = &Column{ColumnName: yyDollar[1].str, Type: yyDollar[2].columnType, Tag: false, Nullable: false, Default: ""}
		}
	case 19:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			yyVAL.column = &Column{ColumnName: yyDollar[1].str, Type: yyDollar[2].columnType, Tag: false, Nullable: true, Default: yyDollar[5].str}
		}
	case 20:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.columnType = reflect.Bool
		}
	case 21:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.columnType = reflect.Bool
		}
	case 22:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.columnType = reflect.Bool
		}
	case 23:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.columnType = reflect.Int8
		}
	case 24:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.columnType = reflect.Int16
		}
	case 25:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.columnType = reflect.Int32
		}
	case 26:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.columnType = reflect.Int32
		}
	case 27:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.columnType = reflect.Int64
		}
	case 28:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.columnType = reflect.Uint8
		}
	case 29:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.columnType = reflect.Uint16
		}
	case 30:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.columnType = reflect.Uint32
		}
	case 31:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.columnType = reflect.Uint64
		}
	case 32:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.columnType = reflect.Float32
		}
	case 33:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.columnType = reflect.Float64
		}
	case 34:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.columnType = reflect.Float32
		}
	case 35:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.columnType = reflect.String
		}
	case 36:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.str = yyDollar[1].str
		}
	case 37:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.str = yyDollar[1].str
		}
	case 38:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.str = yyDollar[1].str
		}
	case 39:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.str = yyDollar[1].str
		}
	case 40:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.str = yyDollar[1].str
		}
	case 41:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.str = "true"
		}
	case 42:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.str = "false"
		}
	case 43:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.str = yyDollar[1].str
		}
	case 44:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.str = string(yyDollar[1].str)
		}
	case 45:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.str = string(yyDollar[1].str)
		}
	case 55:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			yyVAL.statement = &InsertStatement{IsStar: true, Columns: nil, TableName: yyDollar[3].str, InsertData: yyDollar[5].tuples}
		}
	case 56:
		yyDollar = yyS[yypt-6 : yypt+1]
		{
			yyVAL.statement = &InsertStatement{IsStar: true, Columns: nil, TableName: yyDollar[3].str, InsertData: yyDollar[6].tuples}
		}
	case 57:
		yyDollar = yyS[yypt-8 : yypt+1]
		{
			yyVAL.statement = &InsertStatement{IsStar: false, Columns: yyDollar[5].tuple, TableName: yyDollar[3].str, InsertData: yyDollar[8].tuples}
		}
	case 58:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.tuple = []string{yyDollar[1].str}
		}
	case 59:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.tuple = append(yyDollar[1].tuple, yyDollar[3].str)
		}
	case 60:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.tuples = [][]string{yyDollar[2].tuple}
		}
	case 61:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			yyVAL.tuples = append(yyDollar[1].tuples, yyDollar[4].tuple)
		}
	case 62:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.tuple = []string{yyDollar[1].str}
		}
	case 63:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.tuple = append(yyDollar[1].tuple, yyDollar[3].str)
		}
	case 64:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.statement = &DropStatement{TableName: yyDollar[3].str}
		}
	case 65:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.statement = &DeleteStatement{TableName: yyDollar[3].str, IsStar: true, Filters: nil, HasWhere: false}
		}
	case 66:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.statement = &DeleteStatement{TableName: yyDollar[4].str, IsStar: true, Filters: nil, HasWhere: false}
		}
	case 67:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			yyVAL.statement = &DeleteStatement{TableName: yyDollar[3].str, IsStar: false, Filters: yyDollar[5].deleteFilters, HasWhere: true}
		}
	case 68:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.deleteFilters = &DeleteFilter{AndTagFilters: []*TagFilter{yyDollar[1].tagFilter}, OrTagFilters: nil}
		}
	case 69:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.deleteFilters = andJoinTagFilters(yyDollar[1].deleteFilters, yyDollar[3].tagFilter)
		}
	case 70:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.deleteFilters = orJoinTagFilters(yyDollar[1].deleteFilters, yyDollar[3].tagFilter)
		}
	case 71:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			yyVAL.tagFilter = &TagFilter{Key: yyDollar[1].str, Value: strings.Join(yyDollar[4].tuple, "|"), IsNegative: false, IsRegexp: true}
		}
	case 72:
		yyDollar = yyS[yypt-6 : yypt+1]
		{
			yyVAL.tagFilter = &TagFilter{Key: yyDollar[1].str, Value: strings.Join(yyDollar[5].tuple, "|"), IsNegative: true, IsRegexp: true}
		}
	case 73:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.tagFilter = &TagFilter{Key: yyDollar[1].str, Value: yyDollar[3].str, IsNegative: false, IsRegexp: false}
		}
	case 74:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.tagFilter = &TagFilter{Key: yyDollar[1].str, Value: yyDollar[3].str, IsNegative: true, IsRegexp: false}
		}
	case 75:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.tagFilter = &TagFilter{Key: yyDollar[1].str, Value: yyDollar[3].str, IsNegative: false, IsRegexp: true}
		}
	case 76:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.tagFilter = &TagFilter{Key: yyDollar[1].str, Value: yyDollar[4].str, IsNegative: true, IsRegexp: true}
		}
	case 77:
		yyDollar = yyS[yypt-8 : yypt+1]
		{
			yyVAL.statement = &SelectStatement{
				TableName:   yyDollar[4].str,
				IsStar:      true,
				Columns:     nil,
				WhereFilter: yyDollar[5].whereFilters,
				GroupBy:     yyDollar[6].tuple,
				OrderBy:     yyDollar[7].orderBy,
				Limit:       yyDollar[8].str,
			}
		}
	case 78:
		yyDollar = yyS[yypt-8 : yypt+1]
		{
			yyVAL.statement = &SelectStatement{
				TableName:   yyDollar[4].str,
				IsStar:      true,
				Columns:     yyDollar[2].functions,
				WhereFilter: yyDollar[5].whereFilters,
				GroupBy:     yyDollar[6].tuple,
				OrderBy:     yyDollar[7].orderBy,
				Limit:       yyDollar[8].str,
			}
		}
	case 79:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.functions = [][]*Function{yyDollar[1].function}
		}
	case 80:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.functions = append(yyDollar[1].functions, yyDollar[3].function)
		}
	case 81:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.function = append(yyDollar[3].function, &Function{FuncName: yyDollar[1].str, Args: []string{""}})
		}
	case 82:
		yyDollar = yyS[yypt-6 : yypt+1]
		{
			yyVAL.function = append(yyDollar[3].function, &Function{FuncName: yyDollar[1].str, Args: []string{"", yyDollar[5].str}})
		}
	case 83:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.function = []*Function{{FuncName: "", Args: []string{yyDollar[1].str}}}
		}
	case 84:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.str = ""
		}
	case 85:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.str = yyDollar[2].str
		}
	case 86:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.orderBy = nil
		}
	case 87:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			yyVAL.orderBy = &OrderBy{SortingKey: yyDollar[4].tuple, IsAsc: true}
		}
	case 88:
		yyDollar = yyS[yypt-6 : yypt+1]
		{
			yyVAL.orderBy = &OrderBy{SortingKey: yyDollar[4].tuple, IsAsc: false}
		}
	case 89:
		yyDollar = yyS[yypt-6 : yypt+1]
		{
			yyVAL.orderBy = &OrderBy{SortingKey: yyDollar[4].tuple, IsAsc: true}
		}
	case 90:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.tuple = nil
		}
	case 91:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.tuple = yyDollar[3].tuple
		}
	case 92:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			yyVAL.tuple = yyDollar[4].tuple
		}
	case 93:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.whereFilters = nil
		}
	case 94:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.whereFilters = yyDollar[2].whereFilters
		}
	case 95:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.whereFilters = &MultiFilters{TimeFilter: yyDollar[1].timeFilter, AndFilters: nil}
		}
	case 96:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.whereFilters = &MultiFilters{TimeFilter: nil, AndFilters: []*OtherFilter{yyDollar[1].otherFilter}}
		}
	case 97:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.whereFilters = andJoinMultiFilters(yyDollar[1].whereFilters, yyDollar[3].otherFilter)
		}
	case 98:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.whereFilters = orJoinMultiFilters(yyDollar[1].whereFilters, yyDollar[3].otherFilter)
		}
	case 99:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			yyVAL.otherFilter = &OtherFilter{Key: yyDollar[1].str, Op: "IN", Args: strings.Join(yyDollar[4].tuple, "|")}
		}
	case 100:
		yyDollar = yyS[yypt-6 : yypt+1]
		{
			yyVAL.otherFilter = &OtherFilter{Key: yyDollar[1].str, Op: "NOTIN", Args: strings.Join(yyDollar[5].tuple, "|")}
		}
	case 101:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.otherFilter = &OtherFilter{Key: yyDollar[1].str, Op: "=", Args: yyDollar[3].str}
		}
	case 102:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.otherFilter = &OtherFilter{Key: yyDollar[1].str, Op: "<", Args: yyDollar[3].str}
		}
	case 103:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.otherFilter = &OtherFilter{Key: yyDollar[1].str, Op: ">", Args: yyDollar[3].str}
		}
	case 104:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.otherFilter = &OtherFilter{Key: yyDollar[1].str, Op: "LE", Args: yyDollar[3].str}
		}
	case 105:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.otherFilter = &OtherFilter{Key: yyDollar[1].str, Op: "GE", Args: yyDollar[3].str}
		}
	case 106:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.otherFilter = &OtherFilter{Key: yyDollar[1].str, Op: "NE", Args: yyDollar[3].str}
		}
	case 107:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.otherFilter = &OtherFilter{Key: yyDollar[1].str, Op: "LIKE", Args: yyDollar[3].str}
		}
	case 108:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.otherFilter = &OtherFilter{Key: yyDollar[1].str, Op: "NOTLIKE", Args: yyDollar[4].str}
		}
	case 109:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			if strings.ToLower(yyDollar[1].str) == "timestamp" {
				yyVAL.timeFilter = yyDollar[4].timeFilter
			} else {
				yyVAL.timeFilter = nil
			}
		}
	case 110:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.timeFilter = &TimeFilter{Start: "", End: "", Step: yyDollar[1].str}
		}
	case 111:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.timeFilter = &TimeFilter{Start: yyDollar[1].str, End: yyDollar[3].str, Step: ""}
		}
	case 112:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			yyVAL.timeFilter = &TimeFilter{Start: yyDollar[1].str, End: yyDollar[3].str, Step: yyDollar[5].str}
		}
	case 113:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.statement = &DescribeStatement{TableName: yyDollar[3].str}
		}
	}
	goto yystack /* stack new state and value */
}
